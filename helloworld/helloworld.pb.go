// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Sleep                int64    `protobuf:"varint,3,opt,name=sleep,proto3" json:"sleep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_helloworld_0f998951e527f0da, []int{0}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (dst *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(dst, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HelloRequest) GetSleep() int64 {
	if m != nil {
		return m.Sleep
	}
	return 0
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_helloworld_0f998951e527f0da, []int{1}
}
func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (dst *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(dst, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloStreamClient, error)
	SayHelloStream2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloStream2Client, error)
	SayHelloStream3(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloStream3Client, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[0], "/helloworld.Greeter/SayHelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloStreamClient{stream}
	return x, nil
}

type Greeter_SayHelloStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloStreamClient) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayHelloStream2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloStream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[1], "/helloworld.Greeter/SayHelloStream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloStream2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_SayHelloStream2Client interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloStream2Client struct {
	grpc.ClientStream
}

func (x *greeterSayHelloStream2Client) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayHelloStream3(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloStream3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[2], "/helloworld.Greeter/SayHelloStream3", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloStream3Client{stream}
	return x, nil
}

type Greeter_SayHelloStream3Client interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloStream3Client struct {
	grpc.ClientStream
}

func (x *greeterSayHelloStream3Client) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloStream3Client) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayHelloStream(Greeter_SayHelloStreamServer) error
	SayHelloStream2(*HelloRequest, Greeter_SayHelloStream2Server) error
	SayHelloStream3(Greeter_SayHelloStream3Server) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHelloStream(&greeterSayHelloStreamServer{stream})
}

type Greeter_SayHelloStreamServer interface {
	SendAndClose(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloStreamServer) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_SayHelloStream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).SayHelloStream2(m, &greeterSayHelloStream2Server{stream})
}

type Greeter_SayHelloStream2Server interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterSayHelloStream2Server struct {
	grpc.ServerStream
}

func (x *greeterSayHelloStream2Server) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_SayHelloStream3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHelloStream3(&greeterSayHelloStream3Server{stream})
}

type Greeter_SayHelloStream3Server interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayHelloStream3Server struct {
	grpc.ServerStream
}

func (x *greeterSayHelloStream3Server) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloStream3Server) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStream",
			Handler:       _Greeter_SayHelloStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloStream2",
			Handler:       _Greeter_SayHelloStream2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloStream3",
			Handler:       _Greeter_SayHelloStream3_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_helloworld_0f998951e527f0da) }

var fileDescriptor_helloworld_0f998951e527f0da = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x41, 0x4b, 0x03, 0x31,
	0x14, 0x84, 0x4d, 0xab, 0x56, 0x1f, 0x62, 0xe5, 0x21, 0x12, 0xf4, 0x52, 0xf6, 0x20, 0x7b, 0x0a,
	0x4b, 0x7b, 0xf7, 0xd0, 0x83, 0xd5, 0x8b, 0x94, 0xed, 0xc1, 0x73, 0xac, 0x8f, 0x2a, 0x24, 0x9b,
	0x98, 0x64, 0xd1, 0xfd, 0x41, 0xfe, 0x4f, 0x49, 0xd6, 0xc5, 0x55, 0x3c, 0xed, 0xed, 0xcd, 0x24,
	0xf3, 0x31, 0x30, 0x70, 0xf6, 0x42, 0x4a, 0x99, 0x77, 0xe3, 0xd4, 0xb3, 0xb0, 0xce, 0x04, 0x83,
	0xf0, 0xe3, 0x64, 0x0f, 0x70, 0x72, 0x17, 0x55, 0x49, 0x6f, 0x35, 0xf9, 0x80, 0x08, 0xfb, 0x95,
	0xd4, 0xc4, 0xd9, 0x8c, 0xe5, 0xc7, 0x65, 0xba, 0xf1, 0x1c, 0x0e, 0xb6, 0xa6, 0xae, 0x02, 0x1f,
	0xcd, 0x58, 0x3e, 0x2e, 0x5b, 0x11, 0x5d, 0xaf, 0x88, 0x2c, 0x1f, 0xb7, 0x6e, 0x12, 0xd9, 0x35,
	0xc0, 0x37, 0xcf, 0xaa, 0x06, 0x39, 0x4c, 0x34, 0x79, 0x2f, 0x77, 0x1d, 0xb0, 0x93, 0xf3, 0xcf,
	0x11, 0x4c, 0x56, 0x8e, 0x28, 0x90, 0xc3, 0x1b, 0x38, 0xda, 0xc8, 0x26, 0xc5, 0x90, 0x8b, 0x5e,
	0xdd, 0x7e, 0xb3, 0xcb, 0x8b, 0x7f, 0x5e, 0xac, 0x6a, 0xb2, 0x3d, 0xbc, 0x85, 0xd3, 0x2e, 0xbf,
	0x09, 0x8e, 0xa4, 0x1e, 0x42, 0xc9, 0x19, 0xae, 0x60, 0xfa, 0x9b, 0x33, 0x1f, 0x02, 0x2a, 0x18,
	0xde, 0xff, 0x05, 0x2d, 0x86, 0x35, 0x2a, 0xd8, 0xb2, 0x80, 0xab, 0x57, 0x23, 0x76, 0xce, 0x6e,
	0x05, 0x7d, 0x48, 0x6d, 0x15, 0xf9, 0xde, 0xff, 0xe5, 0x34, 0x05, 0x1e, 0xe3, 0xbd, 0x8e, 0xdb,
	0xae, 0xd9, 0xd3, 0x61, 0x1a, 0x79, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x70, 0x4c, 0x84,
	0xf8, 0x01, 0x00, 0x00,
}
